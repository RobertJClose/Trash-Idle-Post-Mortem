{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trash Idle Post-mortem","text":"<p>I recently made a game called Trash Idle which you can play here</p> <p></p> <p>The game was my submission to the Pompous Trash Jam 2025, and I used the occasion as an opportunity to try using an experimental game-design element that has been on my mind for some time.</p>"},{"location":"#an-unusual-source-of-random-numbers","title":"An Unusual Source Of Random Numbers","text":"<p>Several years ago while studying physics I came across a probability distribution with an interesting property: it has no average value. </p> <p>If you use this distribution to generate some random numbers, and you calculate the average of your samples, the resulting number can't be predicted ahead of time for this distribution. You can calculate a well defined average for your samples, but the resulting average will generally never agree with anyone else's samples. Drawing more samples won't help, your average value will forever jump around without purpose.</p> <p>The probability distribution in question is called the Cauchy Distribution, and its probability density function looks like this:</p> <p> Desmos</p> <p>This is a well-know shape - it's a bell-curve! It is not however, the bell curve known as the Normal Distribution. </p> <p>The Normal distribution is arguably the most important probability distribution in all of maths and science, and it has an almost universal role in modelling a massive range of situations involving random numbers. This is because of a result known as the Central Limit Theorem, which we will meet again later.</p> <p> Desmos - The Cauchy distribution is in red, while the Normal distribution is in blue.</p> <p>Given its visual similarity to the Normal distribution, I found it hard to believe that the Cauchy bell-curve has no average value. Surely they both have their average value right there in the middle? </p> <p>What I wanted to explore was if the Cauchy distribution could be used to create some interesting experiences for players in a game. Random numbers are already a common game design-element, and I think most players are generally familiar with how randomness is used in games - could this distribution catch players by surprise? Would players be able to tell something strange is going on? </p>"},{"location":"#structure-of-this-post-mortem","title":"Structure Of This Post-mortem","text":"<p>I've created this post-mortem to share what I learned from making Trash Idle. This includes lessons about the maths of the distribution, but more importantly it includes lessons about the Cauchy distribution as a game-design element.</p> <p>I've organised the post-mortem into a main-sequence of notes, which will stay as focused as possible on the game-design perspective. Throughout the main-sequence notes, I occasionally make reference to mathematical deep dives which explain the drawn conclusions - I've separated those lessons into standalone pages. Those deep dives can take time to explain, so I thought it best to keep the main reading as focused as possible.</p> <p>Finally, I've also included a cheat-sheet containing all of the equations and code examples that are scattered throughout. </p>"},{"location":"Basic%20Properties%20Of%20The%20Cauchy%20Distribution/","title":"Basic Properties Of The Cauchy Distribution","text":""},{"location":"Basic%20Properties%20Of%20The%20Cauchy%20Distribution/#continuous-probability-distributions","title":"Continuous Probability Distributions","text":"<p>The Cauchy is a continuous probability distribution. This means that the distribution is defined by an equation known as the probability density function, or PDF. </p> <p> Desmos</p> <p>When we produce a random value from a distribution, we get a random x-coordinate with a likelihood that corresponds to the value of the density function at that coordinate. For the Cauchy curve shown above, this means that values around zero are more likely than values in the tails. All probability density functions have graphs such that the area under the curve is equal to one. This then allows us to interpret area-under-the-curve as probability:</p> <p> Simplilearn</p> <p>A somewhat paradoxical result of this is that the probability of getting any particular value is actually zero, as the region under any single point on the graph is infinitely narrow. This is a bit weird, but it's actually fine. I won't get into the details, but you can find out more in this video.</p> <p>The PDF for the standard Cauchy distribution is given by this equation:</p> <p>$$ P(x) = \\frac{1}{\\pi(1 + x^2)} $$</p> <p>We can also introduce a scale parameter, $\\gamma$, and a location parameter, $x_0$, to the above equation like this:</p> <p>$$ P(x)=\\frac{1}{\\pi\\gamma \\left[ 1 + \\left( \\frac{x - x_0}{\\gamma} \\right)^2 \\right]} $$</p> <p>The location parameter shifts the bell-curve around, while the scale parameter makes the curve wider or narrower. This gives us much finer control over the random values we expect to get from the distribution.</p> <p> Wikipedia - Cauchy Distribution</p>"},{"location":"Basic%20Properties%20Of%20The%20Cauchy%20Distribution/#the-missing-mean-and-fat-tails","title":"The Missing Mean And \"Fat Tails\"","text":"<p>How is it that the Cauchy distribution is able to have an undefined mean? A key influence is the fact is that the Cauchy has fat tails - that really is the appropriate technical term. Let's compare the Cauchy distribution to the Normal distribution again:</p> <p> Cauchy in red, Normal in blue</p> <p>The Cauchy distribution PDF drops off to zero at a much slower rate compared to the Normal distribution. This makes a typical set of random Cauchy values to be significantly more dispersed compared to a set of random Normal values. </p> <p>Without getting into the mathematical thickets, it is the fat tails which encourage the mean to be undefined for the Cauchy distribution (although fat tails don't necessarily result in a distribution with no mean). Let's say we are drawing samples from the Cauchy and calculating a running sample mean. At one moment, the fat tails means we might suddenly draw a value with a magnitude so extreme that our sample mean changes drastically. Intuitively this is why the sample mean can never settle down to converge on any stable value. </p> <p>The fat-tails of the Cauchy turn out to be quite interesting from a game design perspective. This is one of the key things that I feel I learnt from making Trash Idle, and so we'll explore this deeper in the post-mortem. </p>"},{"location":"Basic%20Properties%20Of%20The%20Cauchy%20Distribution/#generating-random-cauchy-values","title":"Generating Random Cauchy Values","text":"<p>How do we actually generate a random Cauchy value? We start with a random uniform value between zero and one, which we'll label $u$. We can then generate a Cauchy value using this equation:</p> <p>$$ \\text{Cauchy}(u)=x_0 + \\gamma \\tan(\\pi(u-\\frac{1}{2})) $$</p> <p>Here is an implementation for the Unity game engine:</p> <pre><code>using UnityEngine;\n\npublic class CauchyDistribution\n{\n    public float Location = 0f;\n    public float Scale = 1f;\n\n    public float GetRandomValue()\n    {\n        float uniform = Random.value;\n        float standardCauchy = Mathf.Tan(Mathf.PI * (uniform - 0.5f));\n        float adjustedCauchy = Location + Scale * standardCauchyValue;\n        return adjustedCauchy;\n    }\n}\n</code></pre>"},{"location":"Post-mortem%2001/","title":"Using The Cauchy Distribution In A Game","text":"<p>When trying to fit the Cauchy distribution in as a game design element, I initially considered two common scenarios. </p>"},{"location":"Post-mortem%2001/#random-hit-chance","title":"Random Hit Chance","text":"<p>Lots of turn-based games have combat systems where an attack's chance to hit is decided by a random number.</p> <p>Could you make a Cauchy weapon where the hit is still random, but it has no mean chance?</p> <p> XCOM (Visible Hit Chance Mod)</p>"},{"location":"Post-mortem%2001/#loot-tables","title":"Loot Tables","text":"<p>When you defeat an enemy in a game, your vanquished foe may randomly drop some equipment as loot. Players then frequently collect the loot information for each enemy into a Wiki page. For example, players of Elden Ring can go online to discover that they'll have to kill about 200 weak enemies if they want a rare sword, and people collect this sword despite the poor practical advantage of the weapon. </p> <p>Could you give the Wiki writers a Cauchy item that drops randomly, at no mean rate? How would they deal with such an item?</p> <p></p> <p>Elden Ring Wiki - Fire Blossom (I really don't like that you have to farm this ingredient if you want to routinely use certain bombs. The real reason for this post-mortem is so I can vent this frustration.)</p>"},{"location":"Post-mortem%2001/#the-problem-with-the-cauchy-distribution","title":"The Problem With The Cauchy Distribution","text":"<p>I could not work out how to use the Cauchy distribution to recreate the scenarios above.</p> <p>Those two examples can be implemented like this:</p> <ol> <li>Generate a random number uniformly between 0 and 1.</li> <li>Is this number smaller than the chance to hit/chance to drop an item?     We register the hit/drop the item if it is.</li> </ol> <p>There are two issues with using the Cauchy distribution to implement this.</p>"},{"location":"Post-mortem%2001/#the-output-range","title":"The Output Range","text":"<p>The natural place to insert the Cauchy distribution into the above is in step one, but a Cauchy random variable isn't restricted to lie between zero and one. Instead the distribution covers the entire real number-line. </p> <p>I've been tackling this issue but it's proven challenging. A natural idea is to reshape the distribution to mostly fit within the required range, and then we ignore any values which are too extreme:</p> <p></p> <p>This might help, but it's nuanced and mathematically involved. I've separated the investigation of this idea into this note:</p> <ul> <li>Truncating The Cauchy</li> </ul>"},{"location":"Post-mortem%2001/#the-scenarios-as-decisions","title":"The Scenarios As \"Decisions\"","text":"<p>The other issue with using the Cauchy distribution to implement the above is to do with the nature of the scenarios themselves. Step two of the above implementation highlights that these scenarios ultimately result in a Yes or No decision being made based on a threshold value for the random variable. While the random variable might not have an average value, it does still have a well defined chance of being above or below a certain threshold. For example, there is a 50% chance for the random variable to be either above or below the peak at the centre of the distribution. </p> <p>I wanted to use the Cauchy distribution because of the weird fact that it lacks a mean value, but this quirk is irrelevant if we're implementing these scenarios like this. Perhaps there is some way of using the Cauchy to make decisions without there being an \"average\" yes/no answer, but I couldn't come up with anything.</p>"},{"location":"Post-mortem%2001/#cauchy-values-as-currency","title":"Cauchy Values As Currency","text":"<p>Because of the above issues, we'll have to use the random Cauchy values as they come. This means we need a gameplay element which can naturally take any value on the number line, both positive and negative. My first thought was to use the Cauchy values as a kind of damage or healing value. </p> <p>With both physics and the theme of the jam in mind, I thought about a game where you control a rat-atom that is under assault from incoming particles. The Ratom would have a trashball nucleus, while rats would orbit like electrons. In the spirit of quantum mechanics, the rats might randomly absorb particles to gain energy that they then randomly spit back out again. The rat lasers then defend the trashball from the particles. I thought about using Cauchy values to decide the damage of the incoming particles and/or the rat lasers.</p> <p>This idea proved to be a bit clunky, although it did produce this amusing piece of \"concept art\":</p> <p></p> <p>Rats Are Generally Surrounded</p> <p>Stripping the idea to its core, I realised that I was envisioning an idle game. The more natural idea in that case is to use the Cauchy values as the game's currency. I opened up a small canvas in Krita and drew the first thing that came to mind: a person sat at a computer:</p> <p></p>"},{"location":"Post-mortem%2002/","title":"Trash Idle - Development","text":"<p>I decided that the simplest way to bring the Cauchy distribution into a game was as a currency in an idle game. These types of games are also known as incremental games. </p>"},{"location":"Post-mortem%2002/#the-idle-game-format","title":"The Idle Game Format","text":"<p>In my mind, idle games generally have this kind of structure.</p> <ol> <li>There is some kind of simple interaction for the player to perform, like a button click, which nets them a small amount of currency of some kind.</li> <li>The player will quickly have enough money to purchase an upgrade which will automatically perform the interaction on the player's behalf. This first upgrade is generally pretty slow, such that the player can easily make more money by putting in the work themselves.</li> <li>The game then introduces more upgrades to exponentially increase the effectiveness of the automatic currency gain. </li> <li>Pretty soon the player is better off letting the game play itself, and their role changes from mindless button-clicker to patient mega-fund manager. Satisfaction is derived from the immensely large amount of money to be gained, and the strategic decision making involved in spending that money on ever more ludicrous upgrades.</li> </ol> <p>Not all idle games follow this structure, and there are distinctive variations within this structure like multiple different currencies to convert between. Here are some of the games I had in mind as I started on Trash Idle:</p> <ul> <li>Cookie Clicker</li> <li>AdVenture Capitalist</li> <li>(the) Gnorp Apologue - My personal favourite</li> <li>A browser game where you grow larvae into many different classes of insect. Sadly I cannot remember the name of this game.</li> </ul> <p> (the) Gnorp Apologue</p>"},{"location":"Post-mortem%2002/#the-intended-design","title":"The Intended Design","text":"<p>After drawing the protagonist sat at his PC, it was natural to make typing the basic interaction of the game. </p> <p>To meet the jam's theme, I realised that the protagonist should be in the business of creating trash. What could then be more pompous than to self-insert and to make myself the protagonist? I sit at my computer creating trash, hoping one day to make a lot of money. The game's power-fantasy came together quite naturally. </p> <p>With enough typing, the player creates some trash and gets a reward. The value of the reward is where we can use the Cauchy distribution. The random value can either be positive or negative, so sometimes we lose money. Losing money is fine - it takes time to create trash and time is money. </p> <p> First Draft</p> <p>I then had a few ideas which I thought could make for an interesting game. I'll quickly mention them here before we move onto the finished game and what I learnt about the Cauchy distribution from this project.</p> <ul> <li> <p>With a standard Cauchy distribution, players are just as likely to end up with a net amount of positive or negative money. Usually negative money in a game is a strictly bad thing, but I thought I should allow it somehow. The idea was to present the player with upgrades in both directions, with positive money allowing access to the usual sort of stuff, while sufficient debt would allow access to dark upgrades. Aren't most governments in debt anyway?</p> </li> <li> <p>Using the location and scale parameter, the Cauchy reward could be biased in the positive or negative directions, and the likelihood of an extreme windfall could be influenced. At the start of the game, the Cauchy could be negatively biased and narrow, so the player is always losing but at least the stakes are low. As progress is made the player can start regularly making positive gains, with much greater potential for big wins and devastating losses. </p> </li> <li> <p>At one point I imagined that the win-condition of the game would be to make a bazillion smackers. Rather than work towards this goal incrementally however, the game could be designed such that the player can only realistically achieve this goal through a single lucky roll. The Cauchy's fat tails should make implementing such a design more feasible, as extreme rolls are far more rewarding compared to more common distributions.</p> </li> <li> <p>Given the fat tails and volatile nature of Cauchy values, I thought multiple currencies would be necessary. These alternative currencies could be earned through more predictable distributions so that the game still has a solid structure and isn't totally chaotic. I then envisioned having different upgrade trees for each currency, giving each currency a different qualitative flavour.</p> </li> <li> <p>I also considered having several currencies make use of Cauchy distributions with different location and scale parameters. One could also link the Cauchy parameters to the present state of the player's various bank accounts. For example, lots of dollars might make it possible to start earning lots of yen. </p> </li> <li> <p>I also considered a few ways of refreshing the player's typing interaction so that it stays relevant as progress is made. Initially it might not matter what the player types, but later on they are rewarded for avoiding repetition - I was very tempted by the mathematical problem of how to quantify the randomness of the player's input stream. </p> </li> <li> <p>I also considered augmenting the typing with presses of particular keys like the space-bar or the backspace key. For example, if the player's typing represents lines of code, pressing the space-bar introduces tokens within each line, and bonus rewards might be on the table for lines of code with equally spaced tokens. Perhaps sometimes mistakes are introduced, and backspaces are necessary to produce a higher quality piece of trash.</p> </li> </ul>"},{"location":"Post-mortem%2002/#the-finished-game","title":"The Finished Game","text":"<p>As it turns out, I ran out of time before I could implement any of these ideas! </p> <p>I built the necessary code modules and UI to playtest a few of these things out, but the impending jam deadline meant I had no choice but to strip back to a very barebones but functional interactive experience. </p> <p> Trash Idle</p> <p>In the finished game, trash is automatically generated on the player's computer, but hitting any letter-key creates additional progress. Once the trash has been finished, the game rewards the player in either \u5143 (Chinese yuan), \u00a3 (Sterling), or $ (Dollars), with an equal chance for each. </p> <p>The amount in \u5143 is drawn from a standard Cauchy distribution, the amount in \u00a3 is drawn uniformly between zero and one, while the amount in $ is drawn from something called a Lorentzian function. </p> <p>I lifted the Lorentzian function from the Wikipedia page on the Cauchy distribution, but I honestly don't know anything about it. From playtesting I have deduced that on average the player will have about a hundred times more $ compared to \u00a3.  </p>"},{"location":"Post-mortem%2003/","title":"Trash Idle - Playtesting The Cauchy","text":"<p>With the game submitted, I sent it to a few friends for them to try and make sense of. Most of them knew nothing about the game going into the experience, and a few of the playtests were live on a call. I was pleasantly surprised! </p> <p>I didn't really get to implement any of the classic idle-game features, and the usual structure of progression is missing as well. People weren't aware of what was planned or intended however, and they were quite curious about what was going on. Several people were able to convince themselves that what they typed influenced how much money they got, as well as which currency they would be rewarded in. </p> <p>It was a little embarrassing to then reveal that many of those features were planned, but were not implemented. However for me it was really entertaining to see people look for meaning in what was actually a random experience. People also enjoyed the interactive component of mashing away at their keyboards as well. </p> <p>Despite its stripped-back nature I am quite proud of the experience. </p>"},{"location":"The%20Central%20Limit%20Theorem/","title":"The Central Limit Theorem","text":"<p>Consider rolling two dice, and taking the average of their values. This sample mean is itself a random variable, as its value is random according to whatever two values happen to appear on the two dice. </p> <p>The most common scenario is that the sum of the dice values is 7, and so the most common sample mean will be $3.5$. There is only a single combination which produces a sum of 2 or 12 however, so we're less like to find a sample mean of $1$ or $6$. We can plot this behaviour on a histogram:</p> <p>![[Sum Of Two Dice Rolls.png]] Probability distribution of the sample mean of two dice rolls</p> <p>The above histogram represents the probability of the mean value of two dice rolls. What if we increase the number of dice rolls? </p> <p>![[Sum Of 4 Dice Rolls.png]] ![[Sum Of 30 Dice Rolls.png]] Source</p> <p>As the number of dice rolls increases, the distribution of the sample mean value increasingly resembles that of a normal distribution centred at the true population mean of $3.5$! Furthermore, the distribution is becoming narrower as the number of rolls increases. </p> <p>This is due to something called the Central Limit Theorem, and it is the reason why we expect the average value of dice rolls to get closer to $3.5$ over time. When rolling 100 dice, there are simply more ways to produce a sum of 350 compared to a situation where we roll all ones or sixes to get a sum of 100 or 600. </p>"},{"location":"Truncating%20The%20Cauchy/","title":"Truncating The Cauchy","text":"<p>As discussed in [[01 _ Using The Cauchy Distribution In A Game]], my initial attempts at using the Cauchy distribution as a game design element focused on random hit chances and random loot tables. I struggled to incorporate the distribution into those scenarios however. One of the issues was that in these scenarios, we typically make use of a random number between zero and one. The Cauchy distribution spans the entire real number-line however. </p> <p>A natural idea then is to use the distribution's location and scale parameters to squish the distribution almost entirely within the range of zero to one. Here is a Cauchy distribution which has been squished in the $[0,1]$ range using the location and scale parameter:</p> <p>![[Cauchy_SquishedZeroToOne.png]] Desmos</p> <p>Once we've squished the function, we truncate the distribution - if we draw a value outside of the range $[0,1]$, we discard it and draw again until we have a value within the appropriate range.</p> <p>We could also consider clamping the values drawn, however it is easier to study the behaviour of truncated distributions from a maths perspective, and that's what I have tried to do.</p> <p>[!Summary] The Following Analysis Is Unfinished I tried my best to analyse the statistical behaviour of the squished and truncated Cauchy distribution above, however I was only able to get so far.  I'll share as much progress as I have.</p>"},{"location":"Truncating%20The%20Cauchy/#truncated-distributions","title":"Truncated Distributions","text":"<p>In order for a graph to represent a probability distribution, the area under the curve must be equal to one square-unit. This fact then allows us to interpret area-under-the-curve as the probability of drawing a number within a certain range.</p> <p>![[Normal-Area.jpg]] Byjus)</p> <p>When we truncate a distribution, we chop off it's tails and uniformly add the lost area to the middle section of the curve that remains. This keeps the total area under the curve equal to one.</p> <p>![[Modellica.png]] Modellica - A truncated Normal distribution</p> <p>Mathematically, the probability function is restricted by a kind of filtering function $\\text{filter}(x)$, and what remains is multiplied by a scaling factor $S$.</p>"},{"location":"Truncating%20The%20Cauchy/#the-scaling-factor-s","title":"The Scaling Factor $S$","text":"<p>The scaling factor $S$ depends on where we do the truncation. Continuing with the idea that we are chopping off the tails, I'm going to parameterise the behaviour of $S$ by asking, what percentage of the tails are we chopping off? </p> <p>We represent that amount as a number between zero and one and we'll call it $p$. I'll consider $p$ to be the fraction of each tail that we chop off, so the total fraction lost is $2p$. The resulting equation for $S$ is this:</p> <p>$$ S(p) = \\frac{1}{1-2p} $$</p> <p>So if we want to chop off 50% of the graph, then we are going to lose 25% of each tail. This gives us $p=0.25=1/4$. The equation then evaluates to $\\frac{1}{1/2}$, giving us a final scale factor of $\\frac{2}{1}=2$.</p> <p>Once we've decided a value for $p$, we can also calculate where exactly on the tails we are performing the truncation. This can be done using the distribution's quantile function. The quantile function is an alternative equation for representing the same distribution. The quantile function takes a probability $0 \\leq P \\leq 1$ and tells us the $x$ value such that the probability of drawing a value between zero and $x$ is equal to $P$. </p> <p>The equation for the Cauchy distribution is this</p> <p>$$ \\text{Cauchy Quantile}(P) = \\tan ( \\pi \\cdot (P - 1/2) ) $$</p> <p>The graph of this description of the Cauchy is quite different to the bell-curve.</p> <p>![[Cauchy Quantile Graph.png]]</p> <p>The truncation position of the bottom tail is $\\text{Quantile}(p)$, while for the top tail it is $\\text{Quantile}(1 - p)$. If we write the truncation position of the top tail as $x_p$, we can derive</p> <p>$$ x_p = - \\tan\\left(\\pi \\cdot (p - 1/2)\\right) $$</p>"},{"location":"Truncating%20The%20Cauchy/#the-filter-function","title":"The Filter Function","text":"<p>The filter function simply restricts the range:</p> <p>$$ \\text{filter}(x) =  \\begin{cases}  1 &amp; -x_p &lt; x &lt; x_p \\ 0 &amp; \\text{Otherwise} \\end{cases} $$</p>"},{"location":"Truncating%20The%20Cauchy/#the-truncated-cauchy","title":"The Truncated Cauchy","text":"<p>Bringing it all together, we start with the Cauchy distribution and multiply it by the scaling factor and the filter function.</p> <p>$$ \\begin{align}</p> <p>\\text{PDF}(x)_{truncated} &amp;= S \\times \\text{filter}(x) \\times \\text{PDF}(x) \\ \\</p> <p>\\text{PDF}(x)_{Cauchy} &amp;= \\frac{1}{\\pi (1 + x^2)} \\ \\</p> <p>S(p) &amp;= \\frac{1}{1-2p} \\ \\</p> <p>x_p &amp;= - \\tan\\left(\\pi \\cdot (p - 1/2)\\right) \\ \\</p> <p>\\text{filter}(x) &amp;=  \\begin{cases}  1 &amp; -x_p &lt; x &lt; x_p \\ 0 &amp; \\text{Otherwise} \\end{cases}</p> <p>\\end{align} $$</p> <p>This tells us the probability density function of the distribution, which we may then study. </p> <p>Generating truncated-Cauchy variables is almost the same as regular Cauchy variables. We simply discard those that lie outside our desired range:</p> <pre><code>using UnityEngine;\n\npublic float SampleTruncatedCauchy(float p, float location, float scale)\n    {\n        float uniformSample;\n\n        do \n        {\n            uniformSample = Random.value;\n        } \n        while (uniformSample &lt; p || uniformSample &gt; 1 - p);\n\n        float sample = location + scale * \n                        Mathf.Tan(Mathf.PI * (uniformSample - 0.5f));\n\n        return sample;\n    }\n</code></pre>"},{"location":"Truncating%20The%20Cauchy/#properties-of-a-truncated-cauchy-distribution","title":"Properties Of A Truncated Cauchy Distribution","text":"<p>I wanted to make us of the Cauchy distribution because it has no mean value. Sadly, any truncation of the Cauchy distribution removes this fact and restores the mean. However, if the truncation is very conservative, the resulting distribution is nearly a Cauchy. In such a case, it can take a large number of samples before the sample mean converges upon the true population mean.</p> <p>I'd like to quantify the above. </p>"},{"location":"Truncating%20The%20Cauchy/#a-truncated-cauchy","title":"A Truncated Cauchy","text":"<p>Sadly, when we truncate the Cauchy distribution, the resulting function does have a well defined population mean. This destroys the feature of the distribution which I found most interesting, although all is not lost.</p> <p>Suppose we only chop off a tiny portion of the tails, so the truncated distribution is nearly identical to the Cauchy distribution. Although any degree of truncation does produce a distribution with an average value, it can still take a very long time for a sample mean to converge onto it. Perhaps we can squish our Cauchy distribution within $[0,1]$ such that performing a truncation into that range produces a distribution whose true average value takes an impractical amount of time to appear?</p>"},{"location":"Truncating%20The%20Cauchy/#calculating-the-moments","title":"Calculating The Moments","text":""},{"location":"Truncating%20The%20Cauchy/#the-standard-deviation","title":"The Standard Deviation","text":"<p>Let's start with $\\sigma$ - the standard deviation. This is defined as the square root of the variance, which for a continuous probability distribution is defined as:</p> <p>$$ \\newcommand\\dif{\\mathop{}!\\mathrm{d}} \\text{Var}(X) = \\int_\\mathbb{R} x^2 \\cdot \\text{PDF}(x) \\dif x - \\mu^2 $$</p> <p>Where $\\mu$ is the mean of the distribution, and the integral is evaluated over the whole real number line. Truncating the standard Cauchy produces $\\mu = 0$ so we will omit it from here.</p> <p>Returning to our definition of a truncated Cauchy distribution</p> <p>$$ \\text{Standard Cauchy PDF}(x) = \\frac{1}{\\pi (1 + x^2)} $$ $$ \\text{PDF}(x)_{truncated} = S \\times \\text{filter}(x) \\times \\text{PDF}(x)  $$ $$ S(p) = \\frac{1}{1-2p} $$</p> <p>We use this value to define the filter function, which then changes the limits of the integral to give us this expression for the variance of a truncated-Cauchy</p> <p>$$ \\newcommand\\dif{\\mathop{}!\\mathrm{d}} \\text{Var}(X) = \\frac{S}{\\pi} \\int_{-x_p}^{x_p} \\frac{x^2}{1 + x^2} \\dif x $$</p> <p>I'm quite proud of the fact that despite many years away from formal maths education or professional work, I was still able to do this integral myself and (up to some rearranging) I got the same answer as Symbolab</p> <p>$$ \\text{Var}(X) = \\frac{2S}{\\pi} \\left( x_p - \\arctan x_p \\right) $$</p> <p>The standard deviation is then the square-root of the variance</p> <p>$$ \\sigma = \\sqrt{\\frac{2S}{\\pi} \\left( x_p - \\arctan x_p \\right)} $$</p> <p>The fourth moment of a truncated-Cauchy is</p> <p>$$ \\mu_4 = \\frac{2S}{\\pi} \\left[ \\frac{x_p^3}{3} - x_p + \\arctan x_p \\right] $$</p> <p>From the above we may calculated the expected variance of the sample variance from the following</p> <p>$$ \\langle \\text{Var}(s^2) \\rangle = \\frac{1}{N} \\left( \\mu_4 - \\frac{N - 3}{N - 1} \\mu_2^2 \\right) $$</p> <p>Oh fucking hell!</p> <p>$$ \\mu_n = \\frac{2S}{N} \\left[ \\sum_{i=0}^{n}  \\right] $$ $$ \\text{for } n &gt; 0 $$</p>"},{"location":"Truncating%20The%20Cauchy/#-","title":"---","text":""},{"location":"Truncating%20The%20Cauchy/#oh-dear","title":"Oh Dear","text":"<p>To test the above equation for the variance, I wrote this C# code:</p> <ul> <li>https://dotnetfiddle.net/57g4yU</li> </ul> <p>The sample variance consistently differs from the equation above. I've really tried to spot any mistakes in either the equation or the code, but I haven't been able to find anything. </p> <p>At the very least, if the above code is an accurate simulation of the truncated-Cauchy distribution, then we can use it to play around with values for $p$ and $n$. We can rerun the code and watch the sample mean to get a feel for how wildly it jumps around the population mean of zero for different degrees of truncation. We can also look directly at what kind of sample variance values we get. </p> <p>Having done this, I don't feel I should spend any more time trying to work it out. My instinct is that the truncated Cauchy won't be practical as an interesting game design element, but the idea does still feel worth exploring to completion. I'm sorry to leave it here, but I thought I'd share as much progress as I have on this topic.</p>"},{"location":"What%20Do%20You%20Mean%20It%20Has%20No%20Mean/","title":"What Do You Mean It Has No Mean","text":"<p>Let's try to understand a bit more about what it means for this distribution to have an undefined mean. We will start with the far simpler example of rolling a dice.</p>"},{"location":"What%20Do%20You%20Mean%20It%20Has%20No%20Mean/#dice-rolls","title":"Dice Rolls","text":"<p>Let's take a fair six-sided dice and roll it a bunch of times. </p> <p>We'll denote the face value produced by the $i\\text{-th}$ roll as $D_i$, and starting from $i=1$ we'll roll the dice $N$ times in total. We will assume that $N$ is a very large number. Our collection of dice rolls is then this set:</p> <p>$$ D={D_1, D_2, ..., D_N} $$</p> <p>Now we will take our recorded dice rolls and we'll calculate how the mean value of the rolls changed throughout the experiment. For example, we could consider the first three rolls and calculate what the mean value of those three rolls was. We will tag the mean values with a bar over the top of the letters, like $\\bar{D}$.</p> <p>To calculate the mean value up to the $n\\text{-th}$ roll:</p> <p>$$ \\bar{D}n = \\frac{1}{n} \\sum{i=1}^n D_i  $$</p> <p>The end result is a new set that tells us how the mean value changed as we rolled the dice. </p> <p>$$ \\bar{D}={\\bar{D}_1, \\bar{D}_2, ... , \\bar{D}_N} $$</p> <p>So the value of $\\bar{D}_4$ is the average of the first four dice rolls.</p> <p>A fair six-sided dice roll has a well defined true mean value of $3.5$, which is simply the average value of the faces. How do the values in $\\bar{D}$ compare to the true mean value?</p> <p>![[Average Dice Rolls.png]] Wikipedia</p> <p>To start with, the average value can deviate away from the true value quite dramatically. The more you roll the dice however, the averages get closer to the true mean value. </p> <p>You can explore this for yourself at this website, where you may roll several dice simultaneously (this is equivalent to rolling the same dice several times). Each time you run the simulation, the mean value will be calculated automatically. If you roll just a few dice, the mean value can jump around quite dramatically. If you instead roll many dice at once, the mean value will rarely stray far from the expected value of $3.5$. </p>"},{"location":"What%20Do%20You%20Mean%20It%20Has%20No%20Mean/#the-cauchy-distributions-mean-values","title":"The Cauchy Distribution's Mean Values","text":"<p>Let's do the same experiment, only this time we will draw random numbers from the Cauchy distribution instead. </p> <p>Again we draw $N$ values. This time we'll denote them as $C_i$:</p> <p>$$ C={C_1, C_2,...,C_N} $$</p> <p>As before we calculate how the average value changed throughout the experiment:</p> <p>$$ \\bar{C}={\\bar{C}_1,\\bar{C}_2,...,\\bar{C}_N} $$</p> <p>What values do we find in this set for the Cauchy distribution? </p> <p>Unlike in our dice example, the values $\\bar{C}_i$ do not converge on any particular value. The values $\\bar{C}_i$ endlessly fluctuate, and never settle down upon any value. This is what it means for the Cauchy distribution to have no mean.</p> <p>If the distribution has no mean, then what values end up in $\\bar{C}$?</p>"}]}